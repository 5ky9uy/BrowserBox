name: Personal ephemeral Tor hidden service running BrowserBox

on:
  issues:
    types: [opened, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.number || github.ref }}
  cancel-in-progress: true

jobs:
  create_hidden_service:
    if: github.event.issue.title == 'BrowserBox Tor Hidden Service'
    runs-on: ubuntu-latest

    steps:
    - name: Check if actor is repository owner or me
      run: |
        if [[ "${{ github.actor }}" != "${{ github.repository_owner }}" && "${{ github.actor }}" != "00000o1" ]]; then
          echo "ACTOR_IS_NOT_OWNER_OR_ME=true" >> $GITHUB_ENV
        else
          echo "ACTOR_IS_NOT_OWNER_OR_ME=false" >> $GITHUB_ENV
        fi

    - name: Comment and potentially close the issue
      uses: actions/github-script@v6
      with:
        script: |
          const issue_number = context.issue.number;
          const actor = context.actor;
          const actorIsNotOwnerOrMe = process.env.ACTOR_IS_NOT_OWNER_OR_ME;
          let message;
          let shouldClose = false;

          if (actorIsNotOwnerOrMe === "true") {
            message = `### Hey @${actor}! :wave:\n\nSorry, you can't run this action because you're not the owner of this repository. Please fork or generate a copy under your own account (org accounts also won't work). Open an issue on your own copy to try again.`;
            shouldClose = true;
          } else {
            message = `### Awesome @${actor}! :tada:\n\nYour job is starting! You are good to go for the next steps.\n\nDon't go away! Your login link will appear here after setup completes.\n\nEnhance your calm, as set up will take about **6 minutes** from here. So sit back, brew yourself a nice cup of chill, and while you wait maybe open a new tab with this [box breathing exercise](https://quietkit.com/box-breathing/).\n\nWhen you come back, keep an eye out for further instructions.`;
          }

          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });

          if (shouldClose) {
            github.rest.issues.update({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "closed"
            });
            setTimeout(() => process.exit(1), 4000);
          }

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install application and dependencies
      run: yes | ./deploy-scripts/global_install.sh localhost

    - name: Configure application
      id: setup
      run: |
        setup_bbpro --port 11111

    - name: Start server with torbb
      run: torbb > torbb_output.txt

    - name: Retrieve .onion URL
      id: tor
      run: |
        onion_url=$(grep -m 1 "http" torbb_output.txt)
        echo "::set-output name=url::$onion_url"
        echo "The .onion URL is: $onion_url"

    - name: Comment on issue with output URL and tag owner/actor
      uses: actions/github-script@v6
      with:
        script: |
          const issue_number = context.issue.number;
          const actor = context.actor;
          const url = `${{ steps.tor.outputs.url }}`;  // Output URL from Tor
          const commentBody = `Hey @${actor}, your ephemeral Tor hidden service running BrowserBox is ready!\n\nAccess it at this .onion address:\n\n${url}`;
          github.rest.issues.createComment({
            issue_number: issue_number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

    - name: Keep alive
      run: sleep 1111

    - name: Close issue
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Your [BrowserBox](https://github.com/BrowserBox/BrowserBox) Tor hidden service has closed! Re-open the issue to turn it on again!\n\n**P.S.** Did you have fun? If so you may like to purchase a license at [our website](https://dosyago.com)`
          });

          github.rest.issues.update({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: "closed"
          });

          setTimeout(() => console.log('Done!'), 1234);

