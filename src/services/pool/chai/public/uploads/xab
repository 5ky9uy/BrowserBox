      <span id=pagenumber></span>
      <input type="range" id="resizeSlider" min="15" max="200" value="61.8" style="max-width: 30vw;" title="Zoom" class=zoomer>
    </section>
    <section class=document>
      <div class=hex-view>
        <a id=hex-view-link title="View hex of original" href="/hex/command" target=_blank>
          <span class=link-text>HexView</span>
          <strong>&#11042;</strong>
        </a>
      </div>
    </section>
    <section class=document>
      <div class=download>
        <a id=download-link title="Download original" rel=canonical download href=#download>
          <span class=link-text>Download</span>
          <strong>&#xFE3E;</strong>
        </a>
      </div>
    </section>
  </nav>
</header>
<p id=loading>
  Converting&hellip;
</p>
<img id=page>
<script>
  const FORMAT = `$$FORMAT$$`;
  const path = location.pathname;
  const imgUrl = i => path.replace(/\.html$/,`-${i.toString().padStart(4,'0')}.${FORMAT}`);
  const documentFileName = path.replace(/\.html$/, '');
  const noConvertUrl = documentFileName + '.noconvert';
  console.log({documentFileName});
  const hexView = document.querySelector('#hex-view-link');
  const anchor = document.querySelector('#download-link');
  anchor.setAttribute('href', documentFileName);
  const CRAM_WAIT = 349;
  const MAX_TIME_TO_WAIT_FOR_CONVERSION = 10*60*1000; // ten minutes
  let noCram = false;
  let succeeded = false;
  let failed = false;
  let pageNumber = 0;
  let ang = 0;
  let stopCheck = false;

  let hexLink = new URL(hexView.href);
  hexLink.searchParams.set('filePath', documentFileName);
  hexLink.searchParams.set('command', 'next');
  hexView.href = hexLink;
  hexView.target = btoa(documentFileName);

  page.onerror = () => {
    if ( stopCheck ) return;
    setTimeout(checkFirstPage, 1001);
  }
  page.onload = () => {
    succeeded = true;
    loading.innerText = ''; 
    pagenumber.innerText = `page ${(pageNumber + 1)}`;
    page.onerror = checkFirstPage;
  }
  checkFirstPage();
  prev.onclick = () => {
    const nextUrl = imgUrl(--pageNumber);
    if ( noCram ) {
      clearTimeout(noCram);
      noCram = setTimeout(() => {
        noCram = false;
        page.src = nextUrl;
      }, CRAM_WAIT);
    } else {
      page.src = nextUrl;
    }
    if ( pageNumber >= 0 ) {
      pagenumber.innerText = `page ${(pageNumber + 1)}`;
    }
  };
  next.onclick = () => {
    const nextUrl = imgUrl(++pageNumber);
    if ( noCram ) {
      clearTimeout(noCram);
      noCram = setTimeout(() => {
        noCram = false;
        page.src = nextUrl;
      }, CRAM_WAIT);
    } else {
      page.src = nextUrl;
    }
    pagenumber.innerText = `page ${(pageNumber + 1)}`;
  }
  rotate.onclick = () => {
    ang = (ang + 90) % 360;
    page.style.transform = `rotate(${ang}deg)`;
  }

  function checkFirstPage() {
    if ( failed ) {
      loading.innerText = 'No such file, or conversion failed.';
      return;
    } else if ( stopCheck ) {
      return;
    }
    checkNoConvert();
    pageNumber = 0;
    page.src = imgUrl(pageNumber);
    loading.innerHTML = 'Converting&hellip;';
  }

  setTimeout(() => {
    if ( ! succeeded ) {
      failed = true;
    }
  }, MAX_TIME_TO_WAIT_FOR_CONVERSION);

    // Function to resize image based on slider value
  function resizeImage() {
    const slider = document.getElementById("resizeSlider");
    const image = document.getElementById("page");
    const zoomLevel = slider.value;
    image.style.width = zoomLevel + "%";
  }

  // Add event listener to the slider
  document.addEventListener("DOMContentLoaded", function() {
    const slider = document.getElementById("resizeSlider");
    slider.addEventListener("input", resizeImage);
  });

  document.addEventListener("DOMContentLoaded", function() {
    const downloadLink = document.getElementById("download-link"); // Replace with the actual ID of your Download anchor link

    downloadLink.addEventListener("click", function(event) {
      const userConfirmed = confirm("This file could harm your computer. Are you sure you want to download?");
      if (!userConfirmed) {
        event.preventDefault();
      } else if ( globalThis.puterAbilityConfirmed ) {
        event.preventDefault();
        console.log(JSON.stringify({
          puterCustomDownload: {
            url: downloadLink.href,
          }
        }));
      } 
    });
  });

  async function checkNoConvert() {
    console.log(noConvertUrl);
    const resp = await fetch(noConvertUrl);
    if ( resp.ok ) {
      const reason = await resp.text() || 'reasons unkown';
      console.warn(`File did not convert. Reason: ${reason}`);
      console.log(`Stopping checking for the first page...`);
      stopCheck = true;
      clearTimeout(noCram);
      console.log(`Stopped.`);
      loading.innerHTML = `${reason} <br>Please see the hex viewer if you want to review its contents.`;
      // remove the image element used to display the current page
      globalThis?.page?.remove?.();
    }
  }
</script>
<script>
  if ( globalThis.location.hostname.endsWith('cloudtabs.net') ) {
    const maxTimes = 150; // check for some time
    let times = 0;
    let int = setInterval(() => {
      times++;
      if ( (times > maxTimes) || globalThis.puterAbilityConfirmed ) {
        clearInterval(int);
        return;
      }
      // this will be picked up and passed to the meta listener
      console.log(JSON.stringify({
        hasPuterAbility : {
          msg: "Checking puter ability for custom download plugin: 'save to puter desktop'"
        }
      }));
    }, 1001);
  }
</script>
